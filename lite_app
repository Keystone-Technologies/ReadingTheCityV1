use Mojolicious::Lite;
use UUID::Tiny ':std';

my $couchdb = "http://db.xlxcd1.kit.cm:5984/rtc";

get '/' => 'index';
get '/help';

post '/app' => sub {
  my $self = shift;
  my $beacon = $self->param('beacon');
  my ($uuid, $major, $minor) = ($beacon =~ /^(.*?)-(\d{4,5})-(\d{4,5})$/);
  my $last = $self->session->{"$uuid-$major-$minor"};
  my $this = $self->session->{"$uuid-$major-$minor"} = {
    signal => $self->param('signal'),
    proximity => proximity($self->param('signal')),
    status => status($self->param('signal'), $last->{signal}),
    hidden => $self->param('hidden') // $last->{hidden},
    tracker => $last->{tracker} || uuid_to_string(create_uuid(UUID_V4)),
  };
  $self->render_later;
  #warn "$couchdb/$uuid-$major-$minor";
  $self->ua->get("$couchdb/$uuid-$major-$minor" => sub {
    my ($ua, $tx) = @_;
    my $beacon = $tx->res->json || {};
    $beacon->{url} = $beacon->{url}->{$this->{proximity}};
    $beacon->{proximity} = $this->{proximity};
    $beacon->{major} = $major;
    $beacon->{minor} = $minor;
    $beacon->{signal} = $this->{signal};
    $beacon->{status} = $this->{status};
    $beacon->{hidden} = $this->{hidden};
    $self->render(json => $beacon);
  });
};

app->start;

sub status {
  my ($this, $last) = @_;
  return 'arriving' if $this > $last;
  return 'departing' if $this < $last;
  return 'still';
}

sub proximity {
  my $signal = shift;
  return 'visiting' if $signal > 66;
  return 'near' if $signal > 33;
  return 'far' if $signal > 0;
  return 'oor';
}
